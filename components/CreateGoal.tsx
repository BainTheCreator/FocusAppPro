// CreateGoal.tsx ‚Äî RN + NativeWind (–∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ color, –∑–∞–∑–æ—Ä—ã mb-*, 2 –∫–æ–ª–æ–Ω–∫–∏, —Ä–∞–±–æ—á–∞—è "–Ω–∞–∑–∞–¥")
import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { View, Text, Pressable, ScrollView, Modal, BackHandler, Platform } from 'react-native';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  ArrowLeft,
  Calendar as CalendarIcon,
  Brain,
  Target,
  Users,
  Clock,
  Sparkles,
  Plus,
  Trash2,
  CheckSquare,
  Square,
  Pencil,
} from 'lucide-react-native';
import { Calendar as RNCalendar, LocaleConfig } from 'react-native-calendars';
import { createUserGoal } from '@/lib/api';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RU –ª–æ–∫–∞–ª–∏ –¥–ª—è web-–∫–∞–ª–µ–Ω–¥–∞—Ä—è
LocaleConfig.locales['ru'] = {
  monthNames: ['–Ø–Ω–≤–∞—Ä—å','–§–µ–≤—Ä–∞–ª—å','–ú–∞—Ä—Ç','–ê–ø—Ä–µ–ª—å','–ú–∞–π','–ò—é–Ω—å','–ò—é–ª—å','–ê–≤–≥—É—Å—Ç','–°–µ–Ω—Ç—è–±—Ä—å','–û–∫—Ç—è–±—Ä—å','–ù–æ—è–±—Ä—å','–î–µ–∫–∞–±—Ä—å'],
  monthNamesShort: ['–Ø–Ω–≤','–§–µ–≤','–ú–∞—Ä','–ê–ø—Ä','–ú–∞–π','–ò—é–Ω','–ò—é–ª','–ê–≤–≥','–°–µ–Ω','–û–∫—Ç','–ù–æ—è','–î–µ–∫'],
  dayNames: ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ','–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫','–í—Ç–æ—Ä–Ω–∏–∫','–°—Ä–µ–¥–∞','–ß–µ—Ç–≤–µ—Ä–≥','–ü—è—Ç–Ω–∏—Ü–∞','–°—É–±–±–æ—Ç–∞'],
  dayNamesShort: ['–í—Å','–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±'],
  today: '–°–µ–≥–æ–¥–Ω—è',
};
LocaleConfig.defaultLocale = 'ru';

const PRIMARY = '#35D07F';
const MUTED = '#9ca3af';

const categories = [
  { id: 'health', label: '–°–æ—Å—Ç–æ—è–Ω–∏–µ', emoji: 'üí™' },
  { id: 'mind', label: '–ú—ã—à–ª–µ–Ω–∏–µ', emoji: 'üß†' },
  { id: 'skills', label: '–ù–∞–≤—ã–∫–∏', emoji: 'üéØ' },
  { id: 'actions', label: '–î–µ–π—Å—Ç–≤–∏—è', emoji: '‚ö°' },
  { id: 'capital', label: '–ö–∞–ø–∏—Ç–∞–ª', emoji: 'üí∞' },
  { id: 'meaning', label: '–°–º—ã—Å–ª—ã', emoji: '‚ú®' },
  { id: 'family', label: '–°–µ–º—å—è', emoji: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' },
  { id: 'environment', label: '–û–∫—Ä—É–∂–µ–Ω–∏–µ', emoji: 'üåç' },
];

const durations = [
  { id: 'short', label: '–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è', desc: '–î–æ 3 –º–µ—Å—è—Ü–µ–≤' },   // +3 –º–µ—Å
  { id: 'medium', label: '–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è', desc: '3-12 –º–µ—Å—è—Ü–µ–≤' },  // +6 –º–µ—Å
  { id: 'long', label: '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è', desc: '–ë–æ–ª–µ–µ –≥–æ–¥–∞' },       // +12 –º–µ—Å
];

const iconOptions = ['üéØ','üíº','üß†','üí°','üìö','üèÉ‚Äç‚ôÇÔ∏è','üí∞','üå±','‚ö°','üöÄ','üó£Ô∏è','üë®‚Äçüë©‚Äçüëß‚Äçüë¶','üèÜ','üéµ','üßò','üçé','ü™ô','üõ†Ô∏è','üß©','üìà'];

interface CreateGoalProps {
  onBack: () => void;
  onSave: (goal: any) => void;
}

type Subtask = { id: number; title: string; completed: boolean; deadline: string };

export const CreateGoal = ({ onBack, onSave }: CreateGoalProps) => {
  const [step, setStep] = useState<1 | 2 | 3>(1);
  const [saving, setSaving] = useState(false);

  const [goal, setGoal] = useState({
    title: '',
    description: '',
    icon: 'üéØ',
    category: '',
    duration: '',
    deadline: '',
    isTeam: false,
    subtasks: [] as Subtask[],
  });

  const [showAIDecomposition, setShowAIDecomposition] = useState(false);
  const [iconPickerOpen, setIconPickerOpen] = useState(false);
  const [isDatePickerVisible, setDatePickerVisible] = useState(false);

  // –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ü–µ–ª–µ–π
  const [editSubtasks, setEditSubtasks] = useState(false);
  const [draftSubtasks, setDraftSubtasks] = useState<Subtask[]>([]);
  const nextIdRef = useRef<number>(1);

  // –ë–ï–ó–û–ü–ê–°–ù–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–∞–ª–∫–∏ –¥–∞—Ç–∞–ø–∏–∫–µ—Ä–∞ –Ω–∞ native
  const NativeDatePicker = useMemo<any>(() => {
    if (Platform.OS === 'web') return null;
    try {
      const mod = require('react-native-modal-datetime-picker');
      return mod?.default ?? mod;
    } catch (e) {
      console.warn('DatePicker module not available', e);
      return null;
    }
  }, []);

  const toISODate = (d: Date) => {
    const y = d.getFullYear();
    const m = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');
    return `${y}-${m}-${day}`;
  };

  const fromISODate = (iso: string) => {
    const [y, m, d] = iso.split('-').map(Number);
    return new Date(y, (m || 1) - 1, d || 1);
  };

  const addMonthsClamp = (date: Date, months: number) => {
    const year = date.getFullYear();
    const month = date.getMonth();
    const day = date.getDate();
    const target = new Date(year, month + months, 1);
    const daysInTargetMonth = new Date(target.getFullYear(), target.getMonth() + 1, 0).getDate();
    target.setDate(Math.min(day, daysInTargetMonth));
    target.setHours(0, 0, 0, 0);
    return target;
  };

  const formatDisplayDate = (iso?: string) => {
    if (!iso) return '';
    try {
      const date = fromISODate(iso);
      return date.toLocaleDateString('ru-RU', { day: '2-digit', month: 'short', year: 'numeric' });
    } catch {
      return iso || '';
    }
  };

  const mockSubtasks: Subtask[] = [
    { id: 1, title: '–ò–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã React', completed: false, deadline: '15 –¥–µ–∫' },
    { id: 2, title: '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç', completed: false, deadline: '22 –¥–µ–∫' },
    { id: 3, title: '–ò–∑—É—á–∏—Ç—å React Hooks', completed: false, deadline: '1 —è–Ω–≤' },
    { id: 4, title: '–°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', completed: false, deadline: '15 —è–Ω–≤' },
  ];

  const handleAIDecomposition = () => {
    setShowAIDecomposition(true);
    setTimeout(() => {
      setGoal((prev) => ({ ...prev, subtasks: mockSubtasks }));
      setShowAIDecomposition(false);
    }, 1500);
  };

  const canProceed = () => {
    if (step === 1) return goal.title.trim().length > 0 && !!goal.category;
    if (step === 2) return !!goal.duration && !!goal.deadline;
    return true;
  };

  const handleBackPress = useCallback(() => {
    if (iconPickerOpen) {
      setIconPickerOpen(false);
      return true;
    }
    if (isDatePickerVisible) {
      setDatePickerVisible(false);
      return true;
    }
    if (editSubtasks) {
      setEditSubtasks(false);
      return true;
    }
    if (step === 3) {
      setStep(2);
      return true;
    }
    if (step === 2) {
      setStep(1);
      return true;
    }
    onBack();
    return true;
  }, [iconPickerOpen, isDatePickerVisible, editSubtasks, step, onBack]);

  useEffect(() => {
    const sub = BackHandler.addEventListener('hardwareBackPress', handleBackPress);
    return () => sub.remove();
  }, [handleBackPress]);

  // –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–¥—Ü–µ–ª–µ–π
  const openEditSubtasks = () => {
    const current = goal.subtasks ?? [];
    nextIdRef.current = (current.length ? Math.max(...current.map((s) => s.id)) : 0) + 1;
    setDraftSubtasks(current.length ? current.map((s) => ({ ...s })) : [{ id: nextIdRef.current++, title: '', completed: false, deadline: '' }]);
    setEditSubtasks(true);
  };

  const addDraftSubtask = () => {
    setDraftSubtasks((prev) => [...prev, { id: nextIdRef.current++, title: '', completed: false, deadline: '' }]);
  };
  const removeDraftSubtask = (id: number) => {
    setDraftSubtasks((prev) => prev.filter((s) => s.id !== id));
  };
  const updateDraftTitle = (id: number, title: string) => {
    setDraftSubtasks((prev) => prev.map((s) => (s.id === id ? { ...s, title } : s)));
  };
  const toggleDraftCompleted = (id: number) => {
    setDraftSubtasks((prev) => prev.map((s) => (s.id === id ? { ...s, completed: !s.completed } : s)));
  };

  const applyDraftSubtasks = () => {
    const normalized = draftSubtasks
      .map((s) => ({ ...s, title: s.title.trim() }))
      .filter((s) => s.title.length > 0);
    setGoal((prev) => ({ ...prev, subtasks: normalized }));
    setEditSubtasks(false);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —á–µ—Ä–µ–∑ Edge Function goal-create
  const saveToDb = async () => {
    if (!goal.title.trim()) return;
    setSaving(true);
    try {
      const payload = {
        title: goal.title.trim(),
        description: goal.description?.trim() || null,
        icon: goal.icon || null,
        date_end: goal.deadline || null, // YYYY-MM-DD
        status: 'active' as const,
        subtasks: (goal.subtasks || []).map((s) => ({
          name: s.title,
          is_complete: !!s.completed,
        })),
      };
      const created = await createUserGoal(payload);
      onSave({ ...goal, __server: created });
    } catch (e) {
      console.warn('Create goal error', e);
    } finally {
      setSaving(false);
    }
  };

  const IconPicker = () => (
    <Modal visible={iconPickerOpen} transparent animationType="slide" onRequestClose={() => setIconPickerOpen(false)}>
      <Pressable onPress={() => setIconPickerOpen(false)} {...({ className: 'flex-1 bg-black/60' } as any)} />
      <View {...({ className: 'absolute bottom-0 left-0 right-0 bg-card rounded-t-2xl p-4' } as any)}>
        <Text {...({ className: 'text-white text-base font-semibold mb-3' } as any)}>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É</Text>
        <ScrollView {...({ className: 'max-h-[60vh]' } as any)}>
          <View {...({ className: 'flex-row flex-wrap -mx-1 -mb-2' } as any)}>
            {iconOptions.map((emj) => (
              <Pressable
                key={emj}
                onPress={() => {
                  setGoal((p) => ({ ...p, icon: emj }));
                  setIconPickerOpen(false);
                }}
                style={{ width: '12.5%' }}
                {...({ className: 'px-1 mb-2' } as any)}
              >
                <View {...({ className: 'aspect-square items-center justify-center rounded-xl bg-muted' } as any)}>
                  <Text {...({ className: 'text-2xl' } as any)}>{emj}</Text>
                </View>
              </Pressable>
            ))}
          </View>
        </ScrollView>
        <Button variant="outline" {...({ className: 'mt-4 rounded-xl' } as any)} onPress={() => setIconPickerOpen(false)}>
          <Text {...({ className: 'text-primary' } as any)}>–ó–∞–∫—Ä—ã—Ç—å</Text>
        </Button>
      </View>
    </Modal>
  );

  if (step === 1) {
    return (
      <View {...({ className: 'flex-1 w-full bg-background' } as any)}>
        {/* Header */}
        <View {...({ className: 'w-full flex-row items-center justify-between px-4 py-3 border-b border-border' } as any)}>
          <Button variant="ghost" size="sm" onPress={handleBackPress}>
            <ArrowLeft size={16} color="#fff" />
          </Button>
          <Text {...({ className: 'font-semibold text-white' } as any)}>–ù–æ–≤–∞—è —Ü–µ–ª—å</Text>
          <View {...({ className: 'w-8' } as any)} />
        </View>

        <ScrollView contentContainerStyle={{ paddingBottom: 24 }} {...({ className: 'w-full px-4 py-4' } as any)} showsVerticalScrollIndicator={false}>
          {/* Goal Info */}
          <Card {...({ className: 'w-full p-5 rounded-2xl border-transparent mb-5' } as any)}>
            <View {...({ className: 'mb-4' } as any)}>
              <Label {...({ className: 'text-sm font-medium text-white mb-2' } as any)}>–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏</Label>
              <Input
                value={goal.title}
                onChangeText={(text) => setGoal((prev) => ({ ...prev, title: text }))}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–∑—É—á–∏—Ç—å React"
              />
            </View>

            <View {...({ className: 'mb-4' } as any)}>
              <Label {...({ className: 'text-sm font-medium text-white mb-2' } as any)}>–ò–∫–æ–Ω–∫–∞</Label>
              <View {...({ className: 'flex-row items-center' } as any)}>
                <View {...({ className: 'w-12 h-12 rounded-xl bg-muted items-center justify-center mr-2' } as any)}>
                  <Text {...({ className: 'text-2xl' } as any)}>{goal.icon}</Text>
                </View>
                <Button variant="outline" size="sm" onPress={() => setIconPickerOpen(true)}>
                  <Text {...({ className: 'text-primary' } as any)}>–ò–∑–º–µ–Ω–∏—Ç—å</Text>
                </Button>
              </View>
            </View>

            <View>
              <Label {...({ className: 'text-sm font-medium text-white mb-2' } as any)}>–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
              <Textarea
                value={goal.description}
                onChangeText={(text) => setGoal((prev) => ({ ...prev, description: text }))}
                placeholder="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ü–µ–ª–∏..."
                rows={3}
              />
            </View>
          </Card>

          {/* Category Selection */}
          <View {...({ className: 'mb-4' } as any)}>
            <Label {...({ className: 'text-sm font-medium text-white mb-3' } as any)}>–°—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏</Label>
            <View {...({ className: 'flex-row flex-wrap -mx-1' } as any)}>
              {categories.map((category) => {
                const active = goal.category === category.id;
                return (
                  <Pressable
                    key={category.id}
                    onPress={() => setGoal((prev) => ({ ...prev, category: category.id }))}
                    {...({ className: 'w-1/2 px-1 mb-2' } as any)}
                  >
                    <View
                      {...({
                        className:
                          'p-3 rounded-xl border-2 transition-all ' +
                          (active ? 'border-primary bg-primary/5' : 'border-border'),
                      } as any)}
                    >
                      <View {...({ className: 'flex-row items-center' } as any)}>
                        <Text {...({ className: 'text-lg mr-2' } as any)}>{category.emoji}</Text>
                        <Text {...({ className: 'text-sm font-medium text-foreground' } as any)}>{category.label}</Text>
                      </View>
                    </View>
                  </Pressable>
                );
              })}
            </View>
          </View>

          {/* Team Goal Toggle */}
          <Card {...({ className: 'w-full p-5 rounded-2xl mb-4' } as any)}>
            <View {...({ className: 'flex-row items-center justify-between' } as any)}>
              <View {...({ className: 'flex-row items-center' } as any)}>
                <Users size={20} color={goal.isTeam ? PRIMARY : MUTED} />
                <View {...({ className: 'ml-2' } as any)}>
                  <Text {...({ className: 'font-medium text-white mb-1' } as any)}>–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ü–µ–ª—å</Text>
                  <Text {...({ className: 'text-sm text-muted-foreground' } as any)}>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</Text>
                </View>
              </View>
              <Button
                variant={goal.isTeam ? 'default' : 'outline'}
                size="sm"
                onPress={() => setGoal((prev) => ({ ...prev, isTeam: !prev.isTeam }))}
              >
                <Text {...({ className: goal.isTeam ? 'text-primary-foreground' : 'text-primary' } as any)}>
                  {goal.isTeam ? '–î–∞' : '–ù–µ—Ç'}
                </Text>
              </Button>
            </View>
          </Card>

          <Button onPress={() => setStep(2)} disabled={!canProceed()} {...({ className: 'w-full rounded-2xl h-12 mb-2' } as any)}>
            <Text {...({ className: 'text-primary-foreground font-semibold' } as any)}>–î–∞–ª–µ–µ</Text>
          </Button>
        </ScrollView>

        <IconPicker />
      </View>
    );
  }

  if (step === 2) {
    return (
      <View {...({ className: 'flex-1 w-full bg-background' } as any)}>
        {/* Header */}
        <View {...({ className: 'w-full flex-row items-center justify-between px-4 py-3 border-b border-border' } as any)}>
          <Button variant="ghost" size="sm" onPress={handleBackPress}>
            <ArrowLeft size={16} color="#fff" />
          </Button>
          <Text {...({ className: 'font-semibold text-white' } as any)}>–°—Ä–æ–∫–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</Text>
          <View {...({ className: 'w-8' } as any)} />
        </View>

        <ScrollView contentContainerStyle={{ paddingBottom: 24 }} {...({ className: 'w-full px-4 py-4' } as any)} showsVerticalScrollIndicator={false}>
          {/* Duration */}
          <View {...({ className: 'mb-4' } as any)}>
            <Label {...({ className: 'text-sm font-medium text-white mb-3' } as any)}>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</Label>
            {durations.map((duration) => {
              const active = goal.duration === duration.id;

              const monthsToAdd =
                duration.id === 'short' ? 3 :
                duration.id === 'medium' ? 6 : 12;

              return (
                <Pressable
                  key={duration.id}
                  onPress={() => {
                    const newDeadline = addMonthsClamp(new Date(), monthsToAdd);
                    setGoal((prev) => ({
                      ...prev,
                      duration: duration.id,
                      deadline: toISODate(newDeadline),
                    }));
                  }}
                  {...({ className: 'mb-2' } as any)}
                >
                  <View
                    {...({
                      className:
                        'w-full p-3 rounded-xl border-2 transition-all ' +
                        (active ? 'border-primary bg-primary/5' : 'border-border'),
                    } as any)}
                  >
                    <View {...({ className: 'flex-row items-center justify-between' } as any)}>
                      <View>
                        <Text {...({ className: 'font-medium text-white mb-1' } as any)}>{duration.label}</Text>
                        <Text {...({ className: 'text-sm text-muted-foreground' } as any)}>{duration.desc}</Text>
                      </View>
                      <Clock size={16} color={active ? PRIMARY : MUTED} />
                    </View>
                  </View>
                </Pressable>
              );
            })}
          </View>

          {/* Deadline with picker */}
          <Card {...({ className: 'w-full p-5 rounded-2xl mb-4' } as any)}>
            <Label {...({ className: 'text-sm font-medium text-white mb-2' } as any)}>–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞</Label>
            <Pressable onPress={() => setDatePickerVisible(true)} {...({ className: 'flex-row items-center' } as any)}>
              <Input
                value={goal.deadline ? formatDisplayDate(goal.deadline) : ''}
                editable={false}
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
                {...({ className: 'flex-1 mr-2' } as any)}
              />
              <CalendarIcon size={16} color={MUTED} />
            </Pressable>
          </Card>

          <Button onPress={() => setStep(3)} disabled={!canProceed()} {...({ className: 'w-full rounded-2xl h-12' } as any)}>
            <Text {...({ className: 'text-primary-foreground font-semibold' } as any)}>–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω</Text>
          </Button>
        </ScrollView>

        {/* Web –∫–∞–ª–µ–Ω–¥–∞—Ä—å */}
        {Platform.OS === 'web' && (
          <Modal visible={isDatePickerVisible} transparent animationType="fade" onRequestClose={() => setDatePickerVisible(false)}>
            <Pressable onPress={() => setDatePickerVisible(false)} {...({ className: 'flex-1 bg-black/60' } as any)} />
            <View {...({ className: 'absolute bottom-0 left-0 right-0 bg-card rounded-t-2xl p-4' } as any)}>
              <Text {...({ className: 'text-white text-base font-semibold mb-3' } as any)}>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</Text>
              <RNCalendar
                initialDate={goal.deadline || toISODate(new Date())}
                markedDates={
                  goal.deadline
                    ? { [goal.deadline]: { selected: true, selectedColor: PRIMARY, selectedTextColor: '#fff' } }
                    : undefined
                }
                onDayPress={(day) => {
                  setGoal((prev) => ({ ...prev, deadline: day.dateString }));
                  setDatePickerVisible(false);
                }}
                firstDay={1}
                theme={{
                  calendarBackground: 'transparent',
                  textSectionTitleColor: '#9ca3af',
                  dayTextColor: '#fff',
                  todayTextColor: PRIMARY,
                  selectedDayBackgroundColor: PRIMARY,
                  selectedDayTextColor: '#fff',
                  arrowColor: '#fff',
                  monthTextColor: '#fff',
                }}
                style={{ borderRadius: 16, overflow: 'hidden' }}
              />
              <Button variant="outline" {...({ className: 'mt-4 rounded-xl' } as any)} onPress={() => setDatePickerVisible(false)}>
                <Text {...({ className: 'text-primary' } as any)}>–ó–∞–∫—Ä—ã—Ç—å</Text>
              </Button>
            </View>
          </Modal>
        )}

        {/* iOS/Android –ø–∏–∫–µ—Ä */}
        {Platform.OS !== 'web' && NativeDatePicker && (
          <NativeDatePicker
            isVisible={isDatePickerVisible}
            mode="date"
            date={goal.deadline ? fromISODate(goal.deadline) : new Date()}
            locale="ru-RU"
            onConfirm={(date: Date) => {
              setGoal((prev) => ({ ...prev, deadline: toISODate(date) }));
              setDatePickerVisible(false);
            }}
            onCancel={() => setDatePickerVisible(false)}
          />
        )}
      </View>
    );
  }

  if (step === 3) {
    return (
      <View {...({ className: 'flex-1 w-full bg-background' } as any)}>
        {/* Header */}
        <View {...({ className: 'w-full flex-row items-center justify-between px-4 py-3 border-b border-border' } as any)}>
          <Button variant="ghost" size="sm" onPress={handleBackPress}>
            <ArrowLeft size={16} color="#fff" />
          </Button>
          <Text {...({ className: 'font-semibold text-white' } as any)}>–ü–ª–∞–Ω –ø–æ–¥—Ü–µ–ª–µ–π</Text>
          <View {...({ className: 'w-8' } as any)} />
        </View>

        <ScrollView contentContainerStyle={{ paddingBottom: 24 }} {...({ className: 'w-full px-4 py-4' } as any)} showsVerticalScrollIndicator={false}>
          {/* Summary */}
          <Card {...({ className: 'w-full p-4 rounded-2xl bg-gradient-card mb-4' } as any)}>
            <View {...({ className: 'flex-row items-center mb-2' } as any)}>
              <Text {...({ className: 'text-2xl mr-2' } as any)}>{goal.icon}</Text>
              <View>
                <Text {...({ className: 'font-semibold text-white mb-1' } as any)}>{goal.title}</Text>
                <Text {...({ className: 'text-sm text-muted-foreground' } as any)}>
                  {categories.find((c) => c.id === goal.category)?.label} ‚Ä¢ {goal.deadline || '–¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                </Text>
              </View>
            </View>
          </Card>

          {/* AI CTA */}
          {!goal.subtasks.length && !showAIDecomposition && !editSubtasks && (
            <Card {...({ className: 'w-full p-6 rounded-2xl items-center text-center mb-4' } as any)}>
              <View {...({ className: 'w-16 h-16 rounded-full bg-gradient-primary items-center justify-center mb-3' } as any)}>
                <Brain size={32} color="#fff" />
              </View>
              <Text {...({ className: 'font-semibold text-white mb-2' } as any)}>AI –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è</Text>
              <Text {...({ className: 'text-muted-foreground text-sm mb-3' } as any)}>
                –ü–æ–∑–≤–æ–ª—å—Ç–µ AI —Ä–∞–∑–±–∏—Ç—å –≤–∞—à—É —Ü–µ–ª—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏
              </Text>
              <View {...({ className: 'flex-row gap-3 w-full' } as any)}>
                <Button onPress={handleAIDecomposition} {...({ className: 'flex-1 rounded-2xl h-12' } as any)}>
                  <View {...({ className: 'flex-row items-center justify-center' } as any)}>
                    <Sparkles size={16} color="#fff" />
                    <Text {...({ className: 'ml-2 text-primary-foreground font-semibold' } as any)}>–°–¥–µ–ª–∞—Ç—å —Å AI</Text>
                  </View>
                </Button>
                <Button variant="outline" onPress={openEditSubtasks} {...({ className: 'flex-1 rounded-2xl h-12' } as any)}>
                  <View {...({ className: 'flex-row items-center justify-center' } as any)}>
                    <Pencil size={16} color={PRIMARY} />
                    <Text {...({ className: 'ml-2 text-primary font-semibold' } as any)}>–í—Ä—É—á–Ω—É—é</Text>
                  </View>
                </Button>
              </View>
            </Card>
          )}

          {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é */}
          {editSubtasks && (
            <Card {...({ className: 'w-full p-4 rounded-2xl mb-4' } as any)}>
              <View {...({ className: 'flex-row items-center justify-between mb-3' } as any)}>
                <Text {...({ className: 'text-white font-semibold' } as any)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á</Text>
                <Pressable onPress={addDraftSubtask} {...({ className: 'px-3 py-2 rounded-xl bg-primary/10 border border-primary/40 active:opacity-90' } as any)}>
                  <View {...({ className: 'flex-row items-center' } as any)}>
                    <Plus size={14} color={PRIMARY} />
                    <Text {...({ className: 'ml-1 text-primary text-sm' } as any)}>–î–æ–±–∞–≤–∏—Ç—å</Text>
                  </View>
                </Pressable>
              </View>

              <View {...({ className: 'gap-2' } as any)}>
                {draftSubtasks.map((s, idx) => (
                  <View key={s.id} {...({ className: 'rounded-xl border border-border p-3 flex-row items-center gap-2' } as any)}>
                    <Pressable onPress={() => toggleDraftCompleted(s.id)} {...({ className: 'p-1' } as any)}>
                      {s.completed ? <CheckSquare size={18} color={PRIMARY} /> : <Square size={18} color={MUTED} />}
                    </Pressable>
                    <View {...({ className: 'flex-1' } as any)}>
                      <Input
                        value={s.title}
                        onChangeText={(txt) => updateDraftTitle(s.id, txt)}
                        placeholder={`–®–∞–≥ ${idx + 1}`}
                      />
                    </View>
                    <Pressable onPress={() => removeDraftSubtask(s.id)} {...({ className: 'p-2 rounded-lg active:opacity-80' } as any)}>
                      <Trash2 size={16} color="#f87171" />
                    </Pressable>
                  </View>
                ))}
                {draftSubtasks.length === 0 && (
                  <Text {...({ className: 'text-muted-foreground text-xs' } as any)}>
                    –ü–æ–∫–∞ –ø–æ–¥–∑–∞–¥–∞—á –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ ‚Äú–î–æ–±–∞–≤–∏—Ç—å‚Äù, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é.
                  </Text>
                )}
              </View>

              <View {...({ className: 'flex-row gap-3 mt-3' } as any)}>
                <Button variant="outline" onPress={() => setEditSubtasks(false)} {...({ className: 'flex-1 rounded-2xl h-11' } as any)}>
                  <Text {...({ className: 'text-foreground' } as any)}>–û—Ç–º–µ–Ω–∞</Text>
                </Button>
                <Button onPress={applyDraftSubtasks} {...({ className: 'flex-1 rounded-2xl h-11' } as any)}>
                  <Text {...({ className: 'text-primary-foreground font-semibold' } as any)}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏</Text>
                </Button>
              </View>
            </Card>
          )}

          {/* –°–ø–∏—Å–æ–∫ –ø–æ–¥–∑–∞–¥–∞—á (–ø—Ä–æ—Å–º–æ—Ç—Ä) */}
          {!editSubtasks && goal.subtasks.length > 0 && (
            <View>
              <View {...({ className: 'flex-row items-center justify-between mb-3' } as any)}>
                <Label {...({ className: 'text-sm font-medium text-white' } as any)}>–ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</Label>
                <Button variant="ghost" size="sm" onPress={openEditSubtasks}>
                  <View {...({ className: 'flex-row items-center' } as any)}>
                    <Pencil size={12} color={PRIMARY} />
                    <Text {...({ className: 'ml-1 text-primary' } as any)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é</Text>
                  </View>
                </Button>
              </View>
              <View>
                {goal.subtasks.map((subtask, index) => (
                  <Card key={subtask.id} {...({ className: 'w-full p-3 rounded-2xl mb-2' } as any)}>
                    <View {...({ className: 'flex-row items-center' } as any)}>
                      <View {...({ className: 'w-6 h-6 rounded-full bg-muted items-center justify-center mr-2' } as any)}>
                        <Text {...({ className: 'text-xs font-medium text-foreground' } as any)}>{index + 1}</Text>
                      </View>
                      <View {...({ className: 'flex-1' } as any)}>
                        <Text {...({ className: 'text-sm font-medium text-white mb-1' } as any)}>
                          {subtask.title || `–®–∞–≥ ${index + 1}`}
                        </Text>
                        {!!subtask.deadline && (
                          <Text {...({ className: 'text-xs text-muted-foreground' } as any)}>{subtask.deadline}</Text>
                        )}
                      </View>
                      {subtask.completed ? (
                        <CheckSquare size={16} color={PRIMARY} />
                      ) : (
                        <Square size={16} color={MUTED} />
                      )}
                    </View>
                  </Card>
                ))}
              </View>
            </View>
          )}

          {/* –î–µ–π—Å—Ç–≤–∏—è –≤–Ω–∏–∑—É */}
          <View {...({ className: 'mt-4' } as any)}>
            <Button
              onPress={saveToDb}
              disabled={saving}
              {...({ className: 'w-full rounded-2xl h-12' } as any)}
            >
              <View {...({ className: 'flex-row items-center justify-center' } as any)}>
                <Target size={16} color="#fff" />
                <Text {...({ className: 'ml-2 text-primary-foreground font-semibold' } as any)}>
                  {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª—å'}
                </Text>
              </View>
            </Button>
          </View>
        </ScrollView>
      </View>
    );
  }

  return null;
};